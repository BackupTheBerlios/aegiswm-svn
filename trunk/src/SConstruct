import os, sys

opts = Options('defaults.py')

opts.Add('PREFIX', ['Target prefix'])
opts.Add('BINDIR', ['Where binaries go to'])
opts.Add('DATADIR', ['Where data files go to'])
opts.Add('DESTDIR', ['Physical installation prefix', ''])
#opts.Add(BoolOption('BUILDDIR', 'Build to build-*-* directory', ''))
opts.Add(BoolOption('RELEASE', 'Build for release', ''))

env = Environment(
	options = opts,
	#CPPPATH = ['#'],
	#LIBPATH = ['#'],
	#CPPPATH = ['#', '#/handlers', '#/widgets'],
	#LIBPATH = ['#', '#/handlers', '#/widgets'],
)

buildDir = None

if not env.has_key('DESTDIR'):
    env.Replace(DESTDIR = '')

if env['DESTDIR'] == '/':
    env.Replace(DESTDIR = '')

env.Append(CCFLAGS = ['-g'])
# All warnings if compiler is gcc
if env['CC'] == 'gcc':
    env.Append(CCFLAGS = ['-Wall'])

home = os.environ['HOME']
for dir in ['/usr/local/include', '/usr/X11R6/include', '/sw/include', os.path.join(home, 'include')]:
    if os.path.isdir(dir):
        env.Append(CPPPATH = [dir])

for dir in ['/usr/local/lib', '/usr/X11R6/lib', '/sw/lib', os.path.join(home, 'lib')]:
    if os.path.isdir(dir):
        env.Append(LIBPATH = [dir])

conf = env.Configure()

sys_h = open('system.h', 'w')
sys_h.write('/* Auto-generated by build script, do not edit */\n\n')

headers = []
for header in Split("""
  stdio.h
  unistd.h
  sys/wait.h
  signal.h
  stdlib.h
"""):
    t = ""
    for h in headers:
      t += "#include <%s>\n" % h
    t += "#include <%s>\n" % header
    sys.stdout.write("Checking for header file %s..." % header)
    sys.stdout.flush()
    if conf.TryCompile(t, ".c"):
        sys.stdout.write(" yes\n")
        headers.append(header)
        sys_h.write('#define HAVE_%s 1\n' % (header.upper().replace('/', '_').replace('.', '_')))
        sys_h.write('#include <%s>\n\n' % header)
    else:
        sys.stdout.write(" no\n")


if not conf.CheckCHeader('X11/extensions/shape.h'):
    sys.stderr.write('\nCouldn\'t find XShape extension. The XShape extension\n'
                     'is required for this application.\n')
    Exit()

if conf.CheckFunc('setenv'):
    sys_h.write('#define HAVE_SETENV 1\n\n')

if not conf.CheckLib('X11'):
    sys.stderr.write('\nCouldn\'t find X11 library. X11 is needed for most\n'
                     'X11 window managers.')
    Exit()

if not conf.CheckLib('Xext'):
    sys.stderr.write('\nCouldn\'t find X11 extensions library. Yet another requirement\n')
    Exit()

sys_h.close()

#sys.stdout.write('Checking for Imlib2... ')
#sys.stdout.flush()
#env.ParseConfig('imlib2-config --libs --cflags')
#if not conf.TryCompile("""
#define X_DISPLAY_MISSING
#include <Imlib2.h>
#ifndef DATA8
# error "no"
#endif
#int main() {}
#""", ".cpp"):
	#sys.stderr.write('no\n\nCouldn\'t find Imlib2 (http://www.enlightenment.org).\n')
	#Exit(1)
#sys.stdout.write('yes\n')

#sys.stdout.write('Checking for sigc++-2.0... ')
#sys.stdout.flush()
#
#env.ParseConfig('pkg-config sigc++-2.0 --libs --cflags')
#
#if not conf.TryCompile("""
##include <sigc++/sigc++.h>
#int main() {}
#""", ".cpp"):
#	sys.stderr.write('no\n\nCouldn\'t find sigc++-2.0 (http://libsigc.sourceforge.net/).\n')
#	Exit(1)
#sys.stdout.write('yes\n')

#sys.stdout.write('Checking for fontconfig... ')
#sys.stdout.flush()
#
#env.ParseConfig('pkg-config fontconfig --libs --cflags')
#
#if not conf.TryCompile("""
##include <fontconfig/fontconfig.h>
##ifndef FC_VERSION
## error "no"
##endif
#int main() {}
#""", ".cpp"):
#	sys.stderr.write('no\n\nCouldn\'t find fontconfig (http://www.freedesktop.org/Software/fontconfig).\n')
#	Exit(1)
#sys.stdout.write('yes\n')

#sys.stdout.write('Checking for libxml++ version 1.0...')
#sys.stdout.flush()
#env.ParseConfig('pkg-config libxml++-1.0 --libs --cflags')
#if not conf.TryCompile("""
##include <libxml++/libxml++.h>
#int main() {}
#""", ".cpp"):
	#sys.stderr.write('no\n\nCouldn\'t find libxml++ version 1.0 (http://www.xmlsoft.org/).\n')
	#Exit(1)
#sys.stdout.write('yes\n')

env = conf.Finish()

#Export('env')
#
#subdirs = ['handlers', 'widgets']
#for dir in subdirs:
#    if buildDir is None:
#        bd = None
#    else:
#        bd = os.path.join(buildDir, dir)
#    SConscript(os.path.join(dir, 'SConscript'), build_dir = bd)

# Save the options we want to have saved (basically, everything but DESTDIR)
f = open("mulocal.py", "w")
f.write('PREFIX = %s\n' % (`env['PREFIX']`))
f.write('BINDIR = %s\n' % (`env['BINDIR']`))
f.write('DATADIR = %s\n' % (`env['DATADIR']`))
#f.write('BUILDDIR = %s\n' % (`env['BUILDDIR']`))
f.write('RELEASE = %s\n' % (`env['RELEASE']`))
f.close()

sources = Split("""
aegis.cpp
client.cpp
clientmap.cpp
""")

aegiswm = env.Program(target = 'aegiswm', source = sources)

# vim: ft=python
